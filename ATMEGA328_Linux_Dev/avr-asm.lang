<?xml version="1.0" encoding="UTF-8"?>
<!-- 
	Authors: Octavio GÃ¼endulain, based on https://github.com/Alexpert/ArmAssemblyLang
	This files was created to suppor asm for ATMEL architectures.
	
	*note: The "escaped-character" should be updated if it is wrong. Issue could be open
	
	to install this file copy or create a symbolic link to /usr/share/gtksourceview-4/language-specs/ and reset gedit
-->


<language id="avr" name="AVR assembler" version="2.0" _section="Source">
  <metadata>
    <property name="mimetypes">text/x-asm;text/x-assembler</property> 
   <!-- <property name="mimetypes">text/x-avr_asm;text/x-assembler_avr</property>
   	<property name="line-comment-start">;</property>
    -->
    <property name="globs">*.asm; *.s; *.avr</property>
    <property name="line-comment-start">(;|\/\/)</property>
    <property name="block-comment-start">/*</property>
    <property name="block-comment-end">*/</property>    
  </metadata> 

  <styles>
	<style id="comment"           name="Comment"               	   map-to="def:comment"/>
	<style id="escaped-character" name="Escaped Character"         map-to="def:special-char"/>
	<style id="string"            name="String"                    map-to="def:string"/>
	<style id="external"          name="External"                  map-to="def:preprocessor"/>	
  	<style id="operator" 	      name="Operator"		       	   map-to="def:operator"/>
  	<style id="type"              name="Data Type"                 map-to="def:type"/>
  	<style id="char"              name="Character"                 map-to="def:character"/>
  	<style id="statement"         name="Statement"                 map-to="def:statement"/>
  	<style id="hexadecimal"       name="Hexadecimal number"        map-to="def:base-n-integer"/>
  	<style id="constant"          name="Signal name"               map-to="def:constant"/>
  </styles>
   <default-regex-options case-sensitive="false"/>
	
	
    
  <definitions>
  	
  	<define-regex id="escaped-character" extended="true">
      \\(               # leading backslash
      [\\\"\'nrbtf] |   # escaped character
      [0-9]{1,3}    |   # latin encoded char
      u[0-9]{1,4}       # unicode char
      )
    </define-regex>
  	
  	<context id="line-comment" style-ref="comment" end-at-line-end="true" class-disabled="no-spell-check">
		<start>([;])</start>
    	<include>
			<context ref="def:in-comment"/>
		</include>
    </context>
    
    <context id="char" style-ref="char">
    	 <match>'(\%{escaped-character}|.)'</match>
    </context>  
    
  	<context id="strings" style-ref="string" end-at-line-end="true">
    	<start>"</start>
    	<end>"</end>
    </context>	
	<context id="registers" style-ref="type">	
		<keyword>r0</keyword>
		<keyword>r1</keyword>
		<keyword>r2</keyword>
		<keyword>r3</keyword>
		<keyword>r4</keyword>
		<keyword>r5</keyword>
		<keyword>r6</keyword>
		<keyword>r7</keyword>
		<keyword>r8</keyword>
		<keyword>r9</keyword>
		<keyword>r10</keyword>
		<keyword>r11</keyword>
		<keyword>r12</keyword>
		<keyword>r13</keyword>
		<keyword>r14</keyword>
		<keyword>r15</keyword>
		<keyword>r16</keyword>
		<keyword>r17</keyword>
		<keyword>r18</keyword>
		<keyword>r19</keyword>
		<keyword>r20</keyword>
		<keyword>r21</keyword>
		<keyword>r22</keyword>
		<keyword>r23</keyword>
		<keyword>r24</keyword>
		<keyword>r25</keyword>
		<keyword>pc</keyword>
		<keyword>spl</keyword>
		<keyword>sph</keyword>
	</context>	
	  	    
  	<context id="instructions" style-ref="operator">
  	<!-- Atmel AVR 8 bits case-sensitive="FALSE" -->
		<!-- Arithmetics and Matemathics-->
		<keyword>add</keyword>
		<keyword>adc</keyword>
		<keyword>adiw</keyword>
		<keyword>sub</keyword>		
		<keyword>subi</keyword>
		<keyword>sbc</keyword>	
		<keyword>sbci</keyword>			
		<keyword>sbiw</keyword>
		<keyword>and</keyword>
		<keyword>andi</keyword>
		<keyword>or</keyword>
		<keyword>ori</keyword>
		<keyword>eor</keyword>
		<keyword>com</keyword>
		<keyword>neg</keyword>
		<keyword>sbr</keyword>
		<keyword>cbr</keyword>
		<keyword>inc</keyword>
		<keyword>dec</keyword>
		<keyword>tst</keyword>
		<keyword>clr</keyword>
		<keyword>ser</keyword>
		<keyword>mul</keyword>
		<keyword>muls</keyword>
		<keyword>mulsu</keyword>
		<keyword>fmul</keyword>
		<keyword>fmuls</keyword>
		<keyword>fmulsu</keyword>		
		<keyword>rjmp</keyword>
		<keyword>ijmp</keyword>
		<keyword>jmp</keyword>
		<keyword>rcall</keyword>
		<keyword>icall</keyword>
		<keyword>call</keyword>
		<keyword>ret</keyword>
		<keyword>reti</keyword>
		<keyword>cpse</keyword>
		<keyword>cp</keyword>
		<keyword>cpc</keyword>
		<keyword>cpi</keyword>
		<keyword>sbrc</keyword>
		<keyword>sbrs</keyword>
		<keyword>sbic</keyword>
		<keyword>sbis</keyword>
		<keyword>brbs</keyword>
		<keyword>brbc</keyword>
		<keyword>breq</keyword>
		<keyword>brne</keyword>
		<keyword>brcs</keyword>
		<keyword>brcc</keyword>
		<keyword>brsh</keyword>
		<keyword>brlo</keyword>
		<keyword>brmi</keyword>
		<keyword>brpl</keyword>
		<keyword>brge</keyword>
		<keyword>brlt</keyword>
		<keyword>brhc</keyword>
		<keyword>brhs</keyword>
		<keyword>brts</keyword>
		<keyword>brtc</keyword>
		<keyword>brvs</keyword>
		<keyword>brvc</keyword>
		<keyword> brie </keyword>
		<keyword> brid </keyword>
		<!-- Bit Instructions -->
		<keyword>sbi</keyword>		
		<keyword>cbi</keyword>
		<keyword>lsl</keyword>
		<keyword>lsr</keyword>
		<keyword>rol</keyword>
		<keyword>ror</keyword>
		<keyword>asr</keyword>
		<keyword>swap</keyword>
		<keyword>bset</keyword>
		<keyword>bclr</keyword>
		<keyword>bst</keyword>
		<keyword>bld</keyword>
		<keyword>sec</keyword>
		<keyword>clc</keyword>
		<keyword>sen</keyword>
		<keyword>cln</keyword>
		<keyword>sez</keyword>
		<keyword>clz</keyword>
		<keyword>sei</keyword>
		<keyword>cli</keyword>
		<keyword>ses</keyword>
		<keyword>cls</keyword>
		<keyword>sev</keyword>
		<keyword>clv</keyword>
		<keyword>set</keyword>
		<keyword>clt</keyword>
		<keyword>seh</keyword>
		<keyword>clh</keyword>
		<!-- Data transfer instructions -->
		<keyword>mov</keyword>
		<keyword>movw</keyword>
		<keyword>ldi</keyword>
		<keyword>ld</keyword>
		<keyword>ldd</keyword>
		<keyword>lds</keyword>
		<keyword>st</keyword>
		<keyword>std</keyword>
		<keyword>sts</keyword>
		<keyword>lpm</keyword>
		<keyword>in</keyword>
		<keyword>out</keyword>
		<keyword>push</keyword>
		<keyword>pop</keyword>
		<!-- MCU control isntructions -->		
		<keyword>nop</keyword>
		<keyword>sleep</keyword>
		<keyword>wdr</keyword>
		<keyword>break</keyword>		
  	</context> 
  	  
 	<context id="preprocessordef" style-ref="external">
		<match extended="true">
			\.(
			byte
			|cseg|csegsize|db|dd|def|dq|dseg|dw|elif|else|endif|endm|endmacro|equ|error|eseg|exit|if|ifdef|ifndef|include|list|listmac|macro
			|message|nolist|org|overlap|nooverlapset|undef|warning|device|byte|)\b
		</match>
	</context>
	
    <context id="balise" style-ref="statement">
			<match extended="true">\.?([a-z]|[A-Z]|[0-9]|_)+:</match>
	</context>
	<context id="hex" style-ref="hexadecimal">
			<match extended="true">\b0[xX][0-9a-fA-F]+([Uu]([Ll]|LL|ll)?|([Ll]|LL|ll)[Uu]?)?</match>
	</context>
	
	
    
	<context id="hex_constant" style-ref="constant">
			<match extended="true">(\$[0-9a-fA-F]+([Uu]([Ll]|LL|ll)?|([Ll]|LL|ll)[Uu]?)?)\b</match>
	</context> 
		
  <context id="avr" class="no-spell-check">
      <include>
	  	
	  	<context ref="line-comment"/>	  	
	  	<context ref="def:c-like-comment" style-ref="comment"/>
        <context ref="def:c-like-comment-multiline" style-ref="comment"/>
        <context ref="def:c-like-close-comment-outside-comment"/>
        <context ref="registers"/>
      	<context ref="instructions"/>
      	<context ref="preprocessordef"/>  
      	<context ref="balise"/>  
      	<context ref="char"/>
      	<context ref="strings"/>
      	<context ref="hex"/>
      	<context ref="hex_constant"/>	
      </include>
  </context>
  
  </definitions> 
	
</language>


